
// Datasource and generator blocks remain the same
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Models
model User {
  id            Int      @id @default(autoincrement())
  fullName      String
  username      String   @unique
  email         String   @unique
  password_hash String
  role          String   @default("author") // e.g., 'admin', 'author', 'reviewer', 'reviewer_inactive'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  manuscripts   Manuscript[] @relation("SubmittedBy")
}

model JournalCategory {
  id                  String   @id @default(cuid())
  name                String   @unique
  slug                String   @unique
  description         Json
  iconName            String
  imagePath           String
  imageHint           String
  bgColor             String?
  abbreviation        String?
  language            String?
  issn                String?
  doiBase             String?
  startYear           Int?
  publishedArticlesCount Int? @default(0)
  displayIssn         String?
  copyrightYear       Int?
  order               Int
  manuscripts         Manuscript[]
  pages               JournalPage[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Manuscript {
  id                   String    @id @default(cuid())
  articleTitle         String
  abstract             Json
  keywords             String
  journalCategoryId    String
  journalCategory      JournalCategory @relation(fields: [journalCategoryId], references: [id])
  isSpecialReview      Boolean   @default(false)
  coverLetterFileName  String?
  manuscriptFileName   String
  supplementaryFilesName String?
  thumbnailImagePath   String?
  thumbnailImageHint   String?
  authorAgreement      Boolean
  coAuthors            Json? // Storing as JSON
  status               String    @default("Submitted")
  submittedById        Int
  submittedBy          User      @relation("SubmittedBy", fields: [submittedById], references: [id])
  submittedAt          DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  publishedAt          DateTime?
  views                Int?      @default(0)
  downloads            Int?      @default(0)
  citations            Int?      @default(0)
  articleType          String?
  doi                  String?
}

model JournalPage {
  id                String   @id @default(cuid())
  journalCategoryId String
  journalCategory   JournalCategory @relation(fields: [journalCategoryId], references: [id], onDelete: Cascade)
  parentId          String?
  parent            JournalPage?  @relation("SubPages", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children          JournalPage[] @relation("SubPages")
  title             String
  slug              String
  content           Json
  order             Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([journalCategoryId, slug])
}


model SitePage {
    id              String @id @default(cuid())
    slug            String @unique // e.g., 'about-us', 'faq', 'landing-page'
    title           String
    content         Json?
    coverImagePath  String? @db.VarChar(255)
    coverImageHint  String? @db.VarChar(255)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model FaqCategory {
    id      String    @id @default(cuid())
    title   String
    order   Int
    items   FaqItem[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FaqItem {
    id          String      @id @default(cuid())
    question    String
    answer      Json
    order       Int
    categoryId  String
    category    FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

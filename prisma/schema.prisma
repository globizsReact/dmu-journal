// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  email           String   @unique
  password_hash   String
  fullName        String?
  role            String?  @default("author") // e.g., author, reviewer, admin, reviewer_inactive
  submittedManuscripts Manuscript[] @relation("SubmittedByUser")
}

model JournalCategory {
  id              String   @id @default(cuid())
  name            String   @unique
  slug            String   @unique
  description     Json     
  order           Int      @default(0)
  iconName        String
  imagePath       String
  imageHint       String
  
  // New detailed fields
  abbreviation    String?
  language        String?
  issn            String?
  displayIssn     String?
  doiBase         String?
  startYear       Int?
  copyrightYear   Int?

  scope           Json?

  manuscripts     Manuscript[]
}

model Manuscript {
  id              String   @id @default(cuid())
  articleTitle    String
  abstract        Json     
  keywords        String?
  
  journalCategory   JournalCategory @relation(fields: [journalCategoryId], references: [id])
  journalCategoryId String

  isSpecialReview Boolean @default(false)
  
  // Files - storing names/paths as strings
  coverLetterFileName String?
  manuscriptFileName String
  supplementaryFilesName String?
  
  // Author agreement
  authorAgreement Boolean @default(false)

  // Author details (can be a JSON array of objects)
  coAuthors       Json?

  // Tracking and metadata
  status          String   @default("Submitted") // e.g., Submitted, In Review, Accepted, Published, Suspended, Rejected
  submittedAt     DateTime @default(now())
  publishedAt     DateTime?
  views           Int?      @default(0)
  downloads       Int?      @default(0)
  citations       Int?      @default(0)

  // Submitter relationship
  submittedBy     User     @relation("SubmittedByUser", fields: [submittedById], references: [id])
  submittedById   Int

  // Thumbnail
  thumbnailImagePath      String? 
  thumbnailImageHint      String?  
}

model SitePage {
  id      String   @id @default(cuid())
  slug    String   @unique
  title   String
  content Json
  updatedAt DateTime @updatedAt
}

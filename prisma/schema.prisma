// datasource db defines the database connection details.
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// generator client defines the Prisma Client generator.
generator client {
  provider = "prisma-client-js"
}

// Enum for user roles
enum UserRole {
  admin
  author
  reviewer
  reviewer_inactive
}

// User model
model User {
  id                      Int            @id @default(autoincrement())
  fullName                String?        @db.VarChar(255)
  username                String         @unique @db.VarChar(191)
  email                   String         @unique @db.VarChar(191)
  password_hash           String         @db.VarChar(255)
  role                    UserRole       @default(author)
  submittedManuscripts    Manuscript[]   @relation("SubmittedBy")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

// JournalCategory model
model JournalCategory {
  id                      String         @id @default(uuid())
  name                    String         @unique @db.VarChar(255)
  slug                    String         @unique @db.VarChar(255)
  description             Json
  iconName                String         @db.VarChar(255)
  imagePath               String         @db.VarChar(255)
  imageHint               String         @db.VarChar(255)
  order                   Int            @default(0)
  abbreviation            String?        @db.VarChar(255)
  language                String?        @db.VarChar(255)
  issn                    String?        @db.VarChar(255)
  doiBase                 String?        @db.VarChar(255)
  startYear               Int?
  publishedArticlesCount  Int?
  displayIssn             String?        @db.VarChar(255)
  copyrightYear           Int?
  bgColor                 String?        @db.VarChar(255)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  manuscripts             Manuscript[]
  pages                   JournalPage[]
}

// JournalPageType enum
enum JournalPageType {
  RICH_TEXT
  TABLE
  EDITORIAL_BOARD
}

// JournalPage model
model JournalPage {
  id                String          @id @default(uuid())
  title             String
  slug              String
  content           Json?
  pageType          JournalPageType
  order             Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  journalCategory   JournalCategory @relation(fields: [journalCategoryId], references: [id], onDelete: Cascade)
  journalCategoryId String

  parent            JournalPage?    @relation("SubPages", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId          String?
  children          JournalPage[]   @relation("SubPages")

  @@unique([journalCategoryId, slug])
  @@index([parentId])
}


// Manuscript model
model Manuscript {
  id                      String   @id @default(uuid())
  articleTitle            String   @db.VarChar(255)
  abstract                Json
  keywords                String?
  isSpecialReview         Boolean? @default(false)
  
  // File names will be stored as simple strings
  coverLetterFileName     String?  @db.VarChar(255)
  manuscriptFileName      String   @db.VarChar(255)
  supplementaryFilesName  String?
  thumbnailImagePath      String?  @db.VarChar(255)
  thumbnailImageHint      String?

  authorAgreement         Boolean  @default(false)
  coAuthors               Json?

  status                  String   @default("Submitted")
  submittedAt             DateTime @default(now())

  views                   Int?     @default(0)
  downloads               Int?     @default(0)
  citations               Int?     @default(0)

  // Relations
  submittedBy             User     @relation("SubmittedBy", fields: [submittedById], references: [id])
  submittedById           Int
  journalCategory         JournalCategory @relation(fields: [journalCategoryId], references: [id])
  journalCategoryId       String
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@index([submittedById])
  @@index([journalCategoryId])
}

// SitePage model for singleton pages like 'About Us', 'Landing Page', 'FAQ'
model SitePage {
  id             String    @id @default(uuid())
  slug           String    @unique @db.VarChar(191) // 'about-us', 'landing-page', 'faq'
  title          String    @db.VarChar(255)
  content        Json
  coverImagePath String?   @db.VarChar(255)
  coverImageHint String?   @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// FAQ models
model FaqCategory {
  id      String    @id @default(uuid())
  title   String    @db.VarChar(255)
  order   Int       @default(0)
  items   FaqItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FaqItem {
  id         String      @id @default(uuid())
  question   String
  answer     Json
  order      Int         @default(0)
  category   FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

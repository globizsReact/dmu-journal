// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  fullName      String?
  username      String       @unique
  email         String       @unique
  password_hash String
  role          String?      @default("author")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  manuscripts   Manuscript[]
}

model Manuscript {
  id                     String          @id @default(cuid())
  articleTitle           String
  abstract               Json
  keywords               String?
  journalCategory        JournalCategory @relation(fields: [journalCategoryId], references: [id])
  journalCategoryId      String
  isSpecialReview        Boolean?        @default(false)
  authorAgreement        Boolean         @default(false)
  coAuthors              Json?
  status                 String          @default("Submitted")
  submittedById          Int
  submittedBy            User            @relation(fields: [submittedById], references: [id])
  submittedAt            DateTime        @default(now())
  publishedAt            DateTime?
  coverLetterFileName    String?
  manuscriptFileName     String
  supplementaryFilesName String?
  thumbnailImagePath     String?
  thumbnailImageHint     String?
  views                  Int?            @default(0)
  downloads              Int?            @default(0)
  citations              Int?            @default(0)
  articleType            String?
}

model JournalCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          Json
  iconName             String
  imagePath            String
  imageHint            String
  abbreviation         String?
  language             String?
  issn                 String?
  doiBase              String?
  startYear            Int?
  publishedArticles    Manuscript[]
  order                Int           @default(0)
  displayIssn          String?
  copyrightYear        Int?
  scope                Json?
  pages                JournalPage[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model JournalPage {
  id                String          @id @default(cuid())
  title             String
  content           Json?
  order             Int
  journalCategory   JournalCategory @relation(fields: [journalCategoryId], references: [id], onDelete: Cascade)
  journalCategoryId String
  parentId          String?
  parent            JournalPage?    @relation("SubPages", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subPages          JournalPage[]   @relation("SubPages")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model SitePage {
  id             String    @id @default(cuid())
  slug           String    @unique
  title          String
  content        Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  coverImagePath String?
  coverImageHint String?
}

model FaqCategory {
  id        String    @id @default(cuid())
  title     String
  order     Int
  items     FaqItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model FaqItem {
  id         String      @id @default(cuid())
  question   String
  answer     Json
  order      Int
  category   FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

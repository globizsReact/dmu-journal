// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  fullName      String?
  username      String   @unique
  email         String   @unique
  password_hash String
  role          String?  @default("author") // admin, author, reviewer, reviewer_inactive
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  manuscripts Manuscript[]
}

model JournalCategory {
  id                     String          @id @default(cuid())
  name                   String          @unique
  slug                   String          @unique
  description            Json
  order                  Int             @default(0)
  iconName               String
  imagePath              String
  imageHint              String
  publishedArticlesCount Int?
  scope                  Json?
  abbreviation           String?
  language               String?
  issn                   String?
  displayIssn            String?
  doiBase                String?
  startYear              Int?
  copyrightYear          Int?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  manuscripts            Manuscript[]
  journalPages           JournalPage[]
}

model Manuscript {
  id                     String          @id @default(cuid())
  articleTitle           String          @db.VarChar(255)
  abstract               Json
  keywords               String?         @db.VarChar(255)
  journalCategoryId      String
  isSpecialReview        Boolean         @default(false)
  coverLetterFileName    String?         @db.VarChar(255)
  manuscriptFileName     String          @db.VarChar(255)
  supplementaryFilesName String?         @db.VarChar(255)
  thumbnailImagePath     String?         @db.VarChar(255)
  thumbnailImageHint     String?         @db.VarChar(255)
  authorAgreement        Boolean
  coAuthors              Json?
  status                 String          @default("Submitted")
  submittedAt            DateTime        @default(now())
  submittedById          Int
  views                  Int?            @default(0)
  downloads              Int?            @default(0)
  citations              Int?            @default(0)
  articleType            String?
  journalCategory        JournalCategory @relation(fields: [journalCategoryId], references: [id])
  submittedBy            User            @relation(fields: [submittedById], references: [id])

  @@index([journalCategoryId])
  @@index([submittedById])
}

model SitePage {
  id             String   @id @default(cuid())
  slug           String   @unique
  title          String
  content        Json
  coverImagePath String?  @db.VarChar(255)
  coverImageHint String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model FaqCategory {
  id        String    @id @default(cuid())
  title     String
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  items     FaqItem[]
}

model FaqItem {
  id         String      @id @default(cuid())
  question   String
  answer     Json
  order      Int         @default(0)
  categoryId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  category   FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

model JournalPage {
  id                String          @id @default(cuid())
  title             String
  slug              String
  content           Json?
  order             Int
  journalCategoryId String
  parentId          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  journalCategory   JournalCategory @relation(fields: [journalCategoryId], references: [id], onDelete: Cascade)
  parent            JournalPage?    @relation("JournalSubPages", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children          JournalPage[]   @relation("JournalSubPages")

  @@unique([journalCategoryId, slug])
  @@index([journalCategoryId])
  @@index([parentId])
}

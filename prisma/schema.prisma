
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  username      String   @unique
  fullName      String?
  password_hash String
  role          String?  @default("author") // e.g., 'author', 'reviewer', 'admin'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submittedManuscripts Manuscript[] @relation("SubmittedByUser")
}

model JournalCategory {
  id              String        @id @default(cuid())
  name            String        @unique
  slug            String        @unique
  description     Json?         @db.Json
  iconName        String
  imagePath       String
  imageHint       String
  bgColor         String?
  order           Int           @default(0)
  abbreviation    String?
  language        String?
  issn            String?
  doiBase         String?
  startYear       Int?
  displayIssn     String?
  copyrightYear   Int?
  manuscripts     Manuscript[]
  journalPages    JournalPage[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Manuscript {
  id                     String          @id @default(cuid())
  articleTitle           String
  abstract               Json
  keywords               String?
  status                 String          @default("Submitted") // e.g., 'Submitted', 'In Review', 'Accepted', 'Published', 'Rejected'
  submittedAt            DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  isSpecialReview        Boolean         @default(false)
  authorAgreement        Boolean         @default(false)
  coAuthors              Json?
  manuscriptFileName     String
  coverLetterFileName    String?
  supplementaryFilesName String?
  thumbnailImagePath     String?
  thumbnailImageHint     String?
  views                  Int             @default(0)
  downloads              Int             @default(0)
  citations              Int             @default(0)
  submittedById          Int
  submittedBy            User            @relation("SubmittedByUser", fields: [submittedById], references: [id], onDelete: Cascade)
  journalCategoryId      String
  journalCategory        JournalCategory @relation(fields: [journalCategoryId], references: [id], onDelete: Restrict)

  @@index([submittedById])
  @@index([journalCategoryId])
}

model JournalPage {
  id                String          @id @default(cuid())
  title             String
  slug              String
  content           Json
  order             Int             @default(0)
  journalCategoryId String
  journalCategory   JournalCategory @relation(fields: [journalCategoryId], references: [id], onDelete: Cascade)
  parentId          String?
  parent            JournalPage?    @relation("SubPages", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children          JournalPage[]   @relation("SubPages")

  @@unique([journalCategoryId, slug])
  @@index([parentId])
}

model SitePage {
  id             String   @id @default(cuid())
  slug           String   @unique
  title          String
  content        Json
  coverImagePath String?
  coverImageHint String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model FaqCategory {
  id        String    @id @default(cuid())
  title     String
  order     Int
  items     FaqItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model FaqItem {
  id          String      @id @default(cuid())
  question    String
  answer      Json
  order       Int
  categoryId  String
  category    FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
}

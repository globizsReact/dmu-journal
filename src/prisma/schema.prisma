// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int          @id @default(autoincrement())
  fullName      String?
  username      String       @unique
  email         String       @unique
  password_hash String
  role          String?      @default("author") // e.g., 'author', 'reviewer', 'admin', 'reviewer_inactive'
  manuscripts   Manuscript[] @relation("SubmittedManuscripts")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Manuscript {
  id                      String          @id @default(cuid())
  submittedById           Int
  submittedBy             User            @relation("SubmittedManuscripts", fields: [submittedById], references: [id])
  journalCategoryId       String
  journalCategory         JournalCategory @relation(fields: [journalCategoryId], references: [id])
  articleTitle            String          @db.Text
  abstract                Json?
  keywords                String?
  isSpecialReview         Boolean         @default(false)
  authorAgreement         Boolean
  coAuthors               Json?
  coverLetterFileName     String?
  manuscriptFileName      String
  supplementaryFilesName  String?
  thumbnailImagePath      String?         @db.VarChar(255)
  thumbnailImageHint      String?
  status                  String          @default("Submitted") // e.g., Submitted, In Review, Accepted, Published, Suspended, Rejected
  views                   Int?            @default(0)
  downloads               Int?            @default(0)
  citations               Int?            @default(0)
  articleType             String?
  submittedAt             DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
}

model JournalCategory {
  id                     String       @id @default(cuid())
  name                   String       @unique
  slug                   String       @unique
  description            Json?
  iconName               String
  imagePath              String       @db.VarChar(255)
  imageHint              String
  bgColor                String?      @db.VarChar(7)
  order                  Int          @default(0)
  abbreviation           String?
  language               String?
  issn                   String?
  doiBase                String?
  startYear              Int?
  displayIssn            String?
  copyrightYear          Int?
  publishedArticlesCount Int?
  manuscripts            Manuscript[]
  pages                  JournalPage[]
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
}

model JournalPage {
  id                String          @id @default(cuid())
  title             String
  slug              String
  content           Json?
  order             Int
  journalCategoryId String
  journalCategory   JournalCategory @relation(fields: [journalCategoryId], references: [id], onDelete: Cascade)
  parentId          String?
  parent            JournalPage?    @relation("SubPages", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children          JournalPage[]   @relation("SubPages")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([journalCategoryId, slug])
}

model FaqCategory {
  id      String    @id @default(cuid())
  title   String
  order   Int
  items   FaqItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FaqItem {
  id          String      @id @default(cuid())
  question    String
  answer      Json
  order       Int
  categoryId  String
  category    FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// For standalone site pages like 'About Us', 'Landing Page'
model SitePage {
  slug           String   @id @unique
  title          String
  content        Json?
  coverImagePath String?  @db.VarChar(255)
  coverImageHint String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
